from urllib.parse import urlparse

from django.conf import settings
from django.core.files.base import File, ContentFile
from django.core.files.storage import Storage
from django.utils.deconstruct import deconstructible
import ipfshttpclient

__version__ = '0.0.4'


@deconstructible
class InterPlanetaryFileSystemStorage(Storage):
    """IPFS Django storage backend.

    Only file creation and reading is supported
    due to the nature of the IPFS protocol.
    """


    def __init__(self, api_url=None, gateway_url=None):
    # Use multiaddr format that works with latest IPFS
        multiaddr = api_url or "/dns/localhost/tcp/5001/http"
        self._ipfs_client = ipfshttpclient.connect('/ip4/127.0.0.1/tcp/5001')
        self.gateway_url = gateway_url or getattr(
            settings, 'IPFS_STORAGE_GATEWAY_URL', 'https://ipfs.io/ipfs/'
    )


    def _open(self, name: str, mode='rb') -> File:
        """Retrieve the file content identified by multihash.

        :param name: IPFS Content ID multihash.
        :param mode: Ignored. The returned File instance is read-only.
        """
        return ContentFile(self._ipfs_client.cat(name), name=name)

    def _save(self, name: str, content: File) -> str:
        result = self._ipfs_client.add(content.file)
        multihash = result['Hash']
        self._ipfs_client.pin.add(multihash)
        return multihash



    def get_valid_name(self, name):
        """Returns name. Only provided for compatibility with Storage interface."""
        return name

    def get_available_name(self, name, max_length=None):
        """Returns name. Only provided for compatibility with Storage interface."""
        return name

    def size(self, name: str) -> int:
        return self._ipfs_client.object.stat(name)['CumulativeSize']


    def delete(self, name: str):
        self._ipfs_client.pin.rm(name)


    def url(self, name: str):
        """Returns an HTTP-accessible Gateway URL by default.

        Override this if you want direct `ipfs://â€¦` URLs or something.

        :param name: IPFS Content ID multihash.
        :return: HTTP URL to access the content via an IPFS HTTP Gateway.
        """
        return '{gateway_url}{multihash}'.format(gateway_url=self.gateway_url, multihash=name)
